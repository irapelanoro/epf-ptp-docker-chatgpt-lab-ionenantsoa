# Import necessary modules
from flask import Flask, request
import os
import openai

# Create a Flask application instance
app = Flask(__name__)

# Set the OpenAI API key
openai.api_key = os.environ.get('OPENAI_KEY')

# Define a route for the home page
@app.route('/')
def index():
    return "<h1>Hello, World!</h1>"

# Define a route for the chatgpt API
@app.route('/chatgpt')
def chatgpt():
    # Get the 'message' parameter from the request arguments
    args = request.args
    message = args.get("message")
    print(message)

    # Use the OpenAI API to generate a response based on the message
    completion = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": message}]
    )

    # Return the response generated by the OpenAI API
    return completion['choices'][0]['message']['content']

# Define a route for the search_code API
@app.route('/search_code', methods=['GET'])
def search_code():
    # Get the 'language' and 'content' parameters from the request arguments
    language = request.args.get('language')
    content = request.args.get('content')

    # Check if either parameter is missing and return an error if so
    if language is None or content is None:
        return "Error: Missing language or content parameter", 400

    # Use the OpenAI API to generate code based on the language and content
    prompt = f"Write {language} code to {content}:"
    completion = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}]
    )

    # Return the code generated by the OpenAI API
    return completion['choices'][0]['message']['content']

# Define a route for the generate_code API
@app.route('/generate_code', methods=['GET'])
def generate_code():
    # Get the 'language' and 'content' parameters from the request arguments
    language = request.args.get('language')
    content = request.args.get('content')

    # Use the OpenAI API to generate code based on the language and content
    prompt = f"generate {language} code:\n{content}"
    completion = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}]
    )

    # Return the code generated by the OpenAI API
    return completion['choices'][0]['message']['content']


